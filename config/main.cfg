/**
 * @brief Environment configuration
 *
 * Note for the action space definition: first define the number of actions,
 * then define the coordinate changes of each actions as done below.
 */
simulation_limit_time = 100;
world_path = "./config/world.cfg"; ///< world definition for continuous world
trajectory_output_path = "./data/trajectory.csv"; ///< Path for trajectory backup
state_gaussian_stddev = .0; ///< Standard deviation of the Gaussian applied on the resulting state for the continuous world
misstep_probability = .0; ///< Probability for another action to be applied instead of the undertaken one
is_crash_terminal = false; ///< Set to true for terminal crash. If not, the angle of the agent is reverted in case of crash.
void_reward =  0.; ///< Reward recieved in void s4tates (no wall, no waypoint)
wall_reward =  0.; ///< Reward recieved in walls

/**
 * @brief Actions configuration
 *
 * Action definition selector:
 * Set the number of actions and the parameters of each one as follows:
 * default: Cartesian coordinates
 *   The x coordinate of the ith action is called a<i>x
 *   The y coordinate of the ith action is called a<i>y
 * 0: Polar coordinates
 *   The magnitude of the ith action is called a<i>m
 *   The angle of the ith action is called a<i>a
 * 1: Navigation actions
 *   The number of angle variations is called nb_dtheta
 *   The ith angle variation is called dtheta<i>
 *   The number of velocity multiplicative factor is called nb_fvelocity
 *   The ith velocity multiplicative factor is called fvelocity<i>
 *   The max (resp min) velocity is called max_velocity (resp min_velocity)
 *
 * @warning Make sure the action space is compatible with the world configuration.
 * Particularly, if at a certain state any action leads to a wall, the 
 * simulation will stop.
 * @warning Action coordinates are double values.
 * @warning Angles unity must be degrees.
 */
action_definition_selector = 0; ///< Action definition (default is cartesian)
nb_actions = 8; ///< Number of actions for cartesian and polar definitions

/** Default: cartesian actions */
a0x =  0.; a0y = +1.;
a1x =  0.; a1y = -1.;
a2x = +1.; a2y =  0.;
a3x = -1.; a3y =  0.;

/** 0: polar actions (turned to cartesian afterwards) */
a0m = +.2; a0a =   0.;
a1m = +.2; a1a =  45.;
a2m = +.2; a2a =  90.;
a3m = +.2; a3a = 135.;
a4m = +.2; a4a = 180.;
a5m = +.2; a5a = 225.;
a6m = +.2; a6a = 270.;
a7m = +.2; a7a = 315.;

/** 1: navigation actions */
nb_dtheta = 7;
dtheta0 =   0.;
dtheta1 =  20.;
dtheta2 = -20.;
dtheta3 =  40.;
dtheta4 = -40.;
dtheta5 =  60.;
dtheta6 = -60.;
nb_fvelocity = 1;
fvelocity0 =  1.0;
fvelocity1 = 0.95;
fvelocity2 = 1.05;
max_velocity = 0.30;
min_velocity = 0.05;

/**
 * @brief Policy configuration
 *
 * Policy selector:
 * default: random policy
 * 0: Go-straight policy
 * 1: UCT policy
 * 2: OLUCT policy
 * 3: OLTA policy
 *
 * Default policy selector:
 * default: random policy
 * 0: go-straight policy
 */
policy_selector = 1;
discount_factor = .99; ///< discount factor

/* Model parameters for tree-search algorithms */
is_model_dynamic = true;
model_state_gaussian_stddev = .0; ///< Same as state_gaussian_stddev for the model used by the tree-search algorithms
model_misstep_probability = .0; ///< Same as misstep_probability for the model used by the tree-search algorithms

/* OLUCT parameters */
uct_cst = .7; ///< constant for UCT formula
tree_search_budget = 50; ///< budget for tree-search algorithms
default_policy_selector = 0;
default_policy_horizon = 20; ///< horizon for the default policy roll-outs

/**
 * OLTA parameters
 * The values of the b<i>'s is an on/off boolean for the activation of a
 * particular decision criterion.
 */
b0 = true; ///< plain (default)
b1 = true; ///< action validity test
b2 = false; ///< SDM: State Distribution Modality test
b3 = false; ///< SDV: State Distribution Variance test
b4 = false; ///< SDSD: State Distance to State Distribution
b5 = false; ///< RDV: Return Distribution Variance test
sdm_ratio = .8; ///< SDM ratio (State Distribution Modality)
sdv_threshold = .02; ///< Upper threshold for state distribution vmr test
sdsd_threshold = 1.; ///< Upper threshold for state distribution distance test
rdv_threshold = .1; ///< Upper threshold for outcome distribution variance test

